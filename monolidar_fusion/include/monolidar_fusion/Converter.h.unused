#pragma once

namespace Mono_Lidar {

using DataType = float;
using EigenT = Eigen::Matrix<DataType, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;

inline flann::Matrix<DataType> convertEigen2FlannRow(const EigenT& mEigen) {
    flann::Matrix<DataType> mFlann(new DataType[mEigen.size()], mEigen.rows(), mEigen.cols());

    for (size_t n = 0; n < (unsigned)mEigen.size(); ++n) {
        *(mFlann.ptr() + n) = *(mEigen.data() + n);
    }
    return mFlann;
}

inline flann::Matrix<DataType> convertEigen2FlannCol(
    const Eigen::Matrix<DataType, Eigen::Dynamic, Eigen::Dynamic, Eigen::ColMajor>& _mEigen) {
    EigenT mEigen = _mEigen.transpose();
    return convertEigen2FlannRow(mEigen);
}

inline void convertFlannToEigen(const flann::Matrix<DataType>& mFlann, EigenT& mEigen) {
    mEigen.resize(mFlann.rows, mFlann.cols);
    for (size_t n = 0; n < (unsigned)mFlann.rows * (unsigned)mFlann.cols; n++) {
        *(mEigen.data() + n) = *(mFlann.ptr() + n);
    }
}

inline void Convert2Vector(const Eigen::Matrix3Xd& pointsMatrix, std::vector<Eigen::Vector3d>& pointsVector)
{
    for (int i = 0; i < pointsMatrix.cols(); i++)
    {
        double x = pointsMatrix(0, i);
        double y = pointsMatrix(1, i);
        double z = pointsMatrix(2, i);
        pointsVector.push_back(Eigen::Vector3d(x, y, z));
    }
}

template <typename T>
struct eigenCompare {
    bool operator()(const T& lhs, const T& rhs) const {
        return std::lexicographical_compare(lhs.data(), lhs.data() + lhs.size(), rhs.data(),
                                            rhs.data() + rhs.size());
    }
};
}
